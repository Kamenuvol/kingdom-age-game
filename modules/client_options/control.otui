Panel
  OptionCheckBox
    id: classicControl
    !text: tr('Classic control')
    &tooltipAddons: { {{ text = tr('Changes the game shortcuts to classic mode.'), align = AlignLeft }} }

  OptionCheckBox
    id: autoChaseOverride
    !text: tr('Allow auto-chase override.')
    &tooltipAddons: { {{ text = tr('Your character stops to follow your target\nonce you walk.'), align = AlignLeft }} }



  OptionCheckBox
    id: smoothWalk
    !text: tr('Enable smooth walking')
    &tooltipAddons: { {{ text = tr('Schedule next walk before finishing previous step.'), align = AlignLeft }} }
    $!first:
      margin-top: 10

  OptionCheckBox
    id: smartWalk
    !text: tr('Enable smart walking')
    &tooltipAddons: { {{ text = tr('Detect when to use diagonal step based on\nthe keys you are pressing.'), align = AlignLeft }} }

  OptionCheckBox
    id: bouncingKeys
    !text: tr('Enable auto bouncing keys')
    &tooltipAddons: { {{ text = tr('Whenever new key is pressed, will bounce\nprevious key.'), align = AlignLeft }} }



  Label
    id: walkingSensitivityLabel
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 10
    @onSetup: |
      local value = getOption('walkingSensitivityScrollBar')
      self:setText(tr('Walking keys sensitivity: %s', value < 100 and string.format('%d%%', value) or 'max'))

  OptionScrollbar
    id: walkingSensitivityScrollBar
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    minimum: 1
    maximum: 100

  Label
    id: walkingRepeatDelayLabel
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 5
    @onSetup: |
      local value = getOption('walkingRepeatDelayScrollBar')
      self:setText(tr('Walking keys auto-repeat delay: %s', value < 200 and string.format('%d ms', value) or 'max'))

  OptionScrollbar
    id: walkingRepeatDelayScrollBar
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    minimum: 10
    maximum: 200

  Label
    id: bouncingKeysDelayLabel
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 5
    @onSetup: |
      local value = getOption('bouncingKeysDelayScrollBar')
      self:setText(tr('Auto bouncing keys interval: %s', value < 1000 and string.format('%d ms', value) or 'max'))

  OptionScrollbar
    id: bouncingKeysDelayScrollBar
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    minimum: 100
    maximum: 1000

  Label
    id: turnDelayLabel
    !text: tr('Turn delay: %sms', 30)
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 5
    @onSetup: |
      local value = modules.client_options.getOption('turnDelay')
      self:setText(tr('Turn delay: %d ms', value))

  OptionScrollbar
    id: turnDelay
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 3
    minimum: 30
    maximum: 250

  Label
    id: hotkeyDelayLabel
    !text: tr('Hotkey delay: %dms', 30)
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 5
    @onSetup: |
      local value = modules.client_options.getOption('hotkeyDelay')
      self:setText(tr('Hotkey delay: %d ms', value))

  OptionScrollbar
    id: hotkeyDelay
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 3
    minimum: 30
    maximum: 250
